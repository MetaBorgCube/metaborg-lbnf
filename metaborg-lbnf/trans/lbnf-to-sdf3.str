module lbnf-to-sdf3

// to do: comments
// to do: start symbols
// to do: SDF3 module name should be uppercase?
// to do: remove underscore from identifiers
// to do: escape special characters in character classes 
// to do: expression productions to use priorities

imports src-gen/signatures/LBNF-sig

rules

  lbnf-to-sdf3(|filename) :
  	MkGrammar(rs) -> 
  	$[module [filename]
  	  imports Common
  	  context-free syntax
  	    [rs'']
  	  lexical syntax
  	    [lrs]
  	]
  	with rs' := <desugar-all>rs;
  	     {| ListSeparator, ListIterator, ListTerminator, PreSeparator 
  	      : <alltd(set-list-separator)> rs'
  	      ; rs'' := <rules-to-prods>rs'
  	      ; lrs := <lex-to-prods>rs' 
  	      |}
  
  rules-to-prods =
  	filter(rule-to-prod <+ (debug(!"rule-to-prod fail: "); fail)); 
  	separate-by(|"\n")

  rule-to-prod :
  	Rule(LabNoP(Id(c)), IdCat(nt), items) -> 
  	  $<<nt>.<c> = <items'>>
  	with {| EscapeSort
  	      : <set-meta-symbols> items
  	      ; items' := <items-to-symbols> items
  	      |}
  	       
  rule-to-prod :
    Rule(LabNoP(Wild()),IdCat(nt1),[NTerminal(IdCat(nt2))]) -> 
      $[[nt1] = [nt2]]
    
  token-to-prod :
  	Token(nt, re) -> $[[nt] = [re']]
  	with re' := <reg-to-symbols>re
  	
  items-to-symbols :
  	[NTerminal(x@IdCat(_))] -> <id-to-symbol>x
  items-to-symbols :
  	items -> <filter(item-to-symbol <+ (debug(!"item-to-symbol fail: "); fail)); separate-by(|" "); EscapeSort>items
  	 	
  id-to-symbol :
  	IdCat("String") -> "STRING"
  id-to-symbol :
  	IdCat("Ident") -> "ID"
  id-to-symbol :
  	IdCat("Integer") -> "INT" 	
  id-to-symbol :
  	IdCat("CHAR") -> "CHAR" 	
  id-to-symbol :
  	IdCat(x) -> x
  	
  nt-to-symbol(escape) :
  	NTerminal(x@IdCat(_)) -> <id-to-symbol; EscapeSort>x
  nt-to-symbol(escape) :
  	NTerminal(ListCat(x@IdCat(nt))) -> $[[presep][lst][term]]
  	with sep := <ListSeparator <+ !"\" \""> nt
  	with iter := <ListIterator <+ !"*"> nt
  	with term := <ListTerminator <+ !""> nt
  	with presep := <PreSeparator <+ !""> nt
  	with lst := <EscapeSort>$[{[<id-to-symbol>x] [sep]}[iter]]
  	
  item-to-symbol :
  	NTerminal(_) -> <nt-to-symbol(escape)>
  	
  item-to-symbol :
  	Terminal(str) -> <<unescape; un-double-quote; unescape> str>
  	
rules
	
  set-meta-symbols :
  	items -> items
  	with 
  	  if <oncetd(?Terminal("\"[\"") <+ Terminal("\"]\""))> items then
  	  	rules(
  	  	  EscapeSort : x -> $[<[x]>]
  	  	)
  	  else 
  	  	rules(
  	  	  EscapeSort : x -> $<[<x>]>
  	  	)
  	  end
  	  
  set-list-separator :
  	Rule(LabNoP(ListE()), ListCat(IdCat(x)), []) -> <id>
  	with rules(
  	  ListIterator : x -> "*"
  	)
  	
  set-list-separator :
    Rule(LabNoP(ListCons()), ListCat(IdCat(x)), [NTerminal(IdCat(x)), Terminal(sep), NTerminal(ListCat(IdCat(x)))])
    -> <id>
    //where sep' := <unescape; un-double-quote> sep
    with rules(
      ListSeparator : x -> sep
    )
    
  set-list-separator :
    Rule(LabNoP(ListCons()),ListCat(IdCat(x)),[Terminal(sep),NTerminal(IdCat(x)),NTerminal(ListCat(IdCat(x)))])
    -> <id>
    with presep := <unescape; un-double-quote> sep
    with rules(
      ListSeparator : x -> sep
      PreSeparator  : x -> presep
    )
    // such a rule comes from
    // []  . [Exp] ::= ;
    // (:) . [Exp] ::= "," Exp [Exp] ;
    // it means a list that starts with a sep, since it always preceded by another element
    // seems to be a way to get non-empty lists, but also used in this context
    // AppDecl     . Exp4 ::= "<" Ident [Exp] ">" ;

    
  set-list-separator :
    Separator(MEmpty(), IdCat(x), sep) -> <id>
    with rules(
      ListSeparator : x -> sep
      ListIterator : x -> "*"
    )

  set-list-separator :
    Separator(MNonempty(), IdCat(x), sep) -> <id>
    with rules(
      ListSeparator : x -> sep
      ListIterator : x -> "+"
    )
    
  set-list-separator :
    Terminator(MEmpty(), IdCat(x), sep) -> <id>
    with presep := <unescape; un-double-quote> sep
    with rules(
      ListSeparator : x -> sep
      ListTerminator : x -> presep
    )
    
  set-list-separator :
    Terminator(MNonempty(), IdCat(x), sep) -> <id>
    with term := <unescape; un-double-quote> sep
    with rules(
      ListTerminator : x -> term
      ListIterator : x -> "+"
    )

rules 

  desugar-all = 
  	remove-underscores;
  	innermost(desugar)

  desugar :
  	[Terminal("\"[]\"")] -> [Terminal("\"[\""), Terminal("\"]\"")]
  	
  remove-underscores =
  	alltd(remove-underscores-id)
  	
  remove-underscores-id :
  	Id(x) -> Id(y)
  	with y := <filter-underscores> x
  	
  remove-underscores-id :
  	IdCat(x) -> IdCat(y)
  	with y := <filter-underscores> x
  	
  filter-underscores =
  	explode-string; filter(not(?95)); implode-string
  	
rules // regular expressions
	
  lex-to-prods = 
  	filter(token-to-prod); separate-by(|"\n")
  
  reg-to-symbols :
  	RAlt(re1, re2) -> $[[<reg-to-symbols>re1] | [<reg-to-symbols>re2]]
  reg-to-symbols :
  	RMinus(re1, re2) -> $[/* [<reg-to-symbols>re1] - [<reg-to-symbols>re2] */]
  reg-to-symbols :
  	RSeq(re1, re2) -> $[[<reg-to-symbols>re1] [<reg-to-symbols>re2]]  
  reg-to-symbols :
  	RStar(re) -> $[([<reg-to-symbols>re])*]  
  reg-to-symbols :
  	RPlus(re) -> $[([<reg-to-symbols>re])+]  
  reg-to-symbols :
  	ROpt(re) -> $[([<reg-to-symbols>re])?] 
  	
  reg-to-symbols :
  	REps() -> $[ ]  
  reg-to-symbols :
  	RChar(c) -> c
  reg-to-symbols :
  	RAlts(x) -> $<[<y>]>
  	with y := <unescape; un-double-quote> x
  	// characters outside of A-Za-z0-9 should be escaped
  reg-to-symbols :
  	RSeqs(x) -> x
  	
  reg-to-symbols :
  	RLetter() -> $<[A-Za-z]>     
  reg-to-symbols :
  	RUpper() -> $<[A-Z]>        
  reg-to-symbols :
  	RLower() -> $<[a-z]>   
  reg-to-symbols :
  	RAny() -> $<~[]>         
  reg-to-symbols :
  	RDigit() -> $<[0-9]>         